# This workflow performs Windows build and uploads to release
#
# Only builds on:
#     - windows-latest - cl (MSVC)
#

name: Windows Build and Release

on:
  push:
    tags:
      - 'v*'  # 只在推送标签时触发
  workflow_dispatch:  # 允许手动触发

jobs:
  build-windows:
    runs-on: windows-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        # Checkout full-depth to facilitate auto versioning
        fetch-depth: 0

    - name: Pre-install vcpkg
      shell: bash
      run: |
        git clone --depth 1 https://github.com/microsoft/vcpkg.git

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg/installed
          ${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-${{ runner.os }}-${{ hashFiles('.github/workflows/build-tests.yml') }}
        restore-keys: |
          vcpkg-${{ runner.os }}-

    - name: Install dependencies
      shell: bash
      run: |
        # install packages
        ./vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/vcpkg install pkgconf
        ./vcpkg/vcpkg install zlib
        ./vcpkg/vcpkg install libqrencode
        ./vcpkg/vcpkg install zint
        echo "TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.2.*'
        install-deps: 'true'
        archives: 'qtbase qtsvg qttools icu qttranslations'

    - name: Configure CMake
      run: >
        cmake -B ${{ github.workspace }}/build
        -DCMAKE_CXX_COMPILER=cl
        -DCMAKE_C_COMPILER=cl
        -DCMAKE_BUILD_TYPE=Release
        -DCMAKE_TOOLCHAIN_FILE=${{ env.TOOLCHAIN_FILE }}
        -S ${{ github.workspace }}

    - name: Build
      run: cmake --build ${{ github.workspace }}/build --config Release

    - name: Test
      working-directory: ${{ github.workspace }}/build
      run: ctest --build-config Release

    - name: Package artifacts
      shell: bash
      run: |
        # 创建发布目录
        mkdir -p release
        
        # 复制可执行文件（根据实际项目调整路径）
        cp build/Release/*.exe release/ || cp build/*.exe release/ || echo "No .exe files found in expected locations"
        
        # 复制依赖的 DLL 文件
        windeployqt release/*.exe || echo "windeployqt not found or failed"
        
        # 复制其他必要文件
        cp README.md release/ 2>/dev/null || echo "No README.md"
        cp LICENSE* release/ 2>/dev/null || echo "No LICENSE file"
        
        # 打包
        7z a glabels-qt-windows-x64.zip ./release/*

    - name: Create Release
      id: create_release
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref_name }}
        release_name: Release ${{ github.ref_name }}
        draft: false
        prerelease: false
        body: |
          ## Windows Release
          
          This release contains Windows binaries for glabels-qt.
          
          ### Installation
          1. Download `glabels-qt-windows-x64.zip`
          2. Extract to desired location
          3. Run the executable
          
          ### Changes
          - Built with MSVC on Windows
          - Includes all necessary dependencies

    - name: Upload Release Asset
      if: startsWith(github.ref, 'refs/tags/')
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./glabels-qt-windows-x64.zip
        asset_name: glabels-qt-windows-x64.zip
        asset_content_type: application/zip

    - name: Upload artifacts (for manual runs)
      if: ${{ !startsWith(github.ref, 'refs/tags/') }}
      uses: actions/upload-artifact@v4
      with:
        name: glabels-qt-windows-x64
        path: glabels-qt-windows-x64.zip
        retention-days: 30
