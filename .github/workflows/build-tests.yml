name: Windows Build & Release

on:
  push:
    branches:
      - master  # 仅在 main 分支触发

jobs:
  build:
    runs-on: windows-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    # --- 安装 vcpkg 并缓存 ---
    - name: Pre-install vcpkg
      shell: bash
      run: git clone --depth 1 https://github.com/microsoft/vcpkg.git

    - name: Restore vcpkg cache
      uses: actions/cache@v4
      with:
        path: |
          ${{ github.workspace }}/vcpkg/installed
          ${{ github.workspace }}/vcpkg/downloads
        key: vcpkg-windows-${{ hashFiles('.github/workflows/build-tests.yml') }}
        restore-keys: |
          vcpkg-windows-

    - name: Install dependencies via vcpkg
      shell: bash
      run: |
        ./vcpkg/bootstrap-vcpkg.sh
        ./vcpkg/vcpkg install pkgconf zlib libqrencode zint
        echo "TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake" >> $GITHUB_ENV

    # --- 安装 Qt ---
    - name: Install Qt
      uses: jurplel/install-qt-action@v4
      with:
        version: '6.2.*'
        install-deps: 'true'
        archives: 'qtbase qtsvg qttools icu qttranslations'

    # --- 安装 NSIS ---
    - name: Install NSIS
      shell: powershell
      run: choco install nsis -y

    # --- 设置构建目录 ---
    - name: Set build directory
      id: strings
      shell: bash
      run: echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

    # --- 配置 CMake ---
    - name: Configure CMake
      run: |
        cmake -B ${{ steps.strings.outputs.build-output-dir }} `
              -DCMAKE_CXX_COMPILER=cl `
              -DCMAKE_C_COMPILER=cl `
              -DCMAKE_BUILD_TYPE=Release `
              -DCMAKE_TOOLCHAIN_FILE=${{ env.TOOLCHAIN_FILE }} `
              -S ${{ github.workspace }}

    # --- 构建 Release ---
    - name: Build Release
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config Release

    # --- 拷贝依赖 DLL 到 Release 文件夹 ---
    - name: Copy required DLLs
      shell: bash
      run: |
        cp vcpkg/installed/x64-windows/bin/*.dll build/glabels/Release/
        cp vcpkg/installed/x64-windows/bin/*.dll build/glabels-batch/Release/

    # --- 生成 Windows 安装包 ---
    - name: Build NSIS Installer
      run: |
        cd build
        cpack -C Release -G NSIS

    # --- 自动生成 Release tag ---
    - name: Determine Release tag
      id: get_version
      shell: bash
      run: |
        if [ -f VERSION.txt ]; then
          VERSION=$(cat VERSION.txt)
        else
          VERSION=$(git rev-parse --short HEAD)
        fi
        echo "tag=v${VERSION}" >> $GITHUB_OUTPUT

    # --- 上传安装包到 GitHub Release ---
    - name: Upload installer to GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ steps.get_version.outputs.tag }}
        name: Release ${{ steps.get_version.outputs.tag }}
        files: |
          build/*.exe
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
